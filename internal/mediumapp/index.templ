package mediumapp


import (
	"fmt"
	"example.com/medium/ent"
)

templ base(title string, content templ.Component, userContext UserContext) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<link rel="stylesheet" href="/static/styles.css" />
		<script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
	    <title>{ title }</title>
	</head>
	<body class="max-w-4xl mx-auto py-12">
		<nav>
			<a href="/" id="home" class="py-2 px-3 text-gray-900 rounded hover:bg-gray-100 border-2 cursor-pointer">Home</a>
			if userContext.SignedIn {
				<a href="/user" id="user" class="py-2 px-3 text-gray-900 rounded hover:bg-gray-100 border-2 cursor-pointer">{ userContext.UserName }</a>
			} else {
				<a href="/sign-up" id="sign-up" class="py-2 px-3 text-gray-900 rounded hover:bg-gray-100 border-2 cursor-pointer">Sign Up</a>
				<a href="/sign-in" id="sign-in" class="py-2 px-3 text-gray-900 rounded hover:bg-gray-100 border-2 cursor-pointer">Sign In</a>
			}
		</nav>
		<div class="container mx-auto m-8">
			<h1 class="text-4xl">{ title }</h1>
			@content
		</div>
	</body>
	</html>
}

templ articleView(article *ent.Article) {
	<a href={ templ.URL(fmt.Sprintf("/article/%d", article.ID)) } class="article block max-w m-2 p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
		<h5 class="title mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">{ article.Title }</h5>
		<span class="bg-blue-100 text-blue-800 text-sm font-medium me-2 px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300">{ article.Edges.User.Name }</span>
		<p class="content font-normal text-gray-700 dark:text-gray-400">{ article.Content }</p>
	</a>
}

type Pagination struct {
   currentPage int
   totalPageCount int
}

templ indexContent(articles []*ent.Article, userContext UserContext, pagination Pagination) {
    if userContext.SignedIn {
		<div  class="py-2">
			<a id="new-article" href="/new-article" class="btn">
				New article
			</a>
		</div>
    }
	<div class="py-8">
		for _, article := range articles {
			@articleView(article)
		}
	</div>
    <div id="pagination" class="join flex flex-wrap w-full">
	   for i := range pagination.totalPageCount {
			<a href={ templ.URL(fmt.Sprintf("/page/%v", i+1)) } class={ "join-item", "btn", templ.KV("btn-active", i + 1 == pagination.currentPage)}>{ fmt.Sprint(i + 1) }</a>
	   }
	</div>
}

templ index(articles []*ent.Article, userContext UserContext, pagination Pagination) {
	@base("Blog site", indexContent(articles, userContext, pagination), userContext)
}

templ fieldErrors(fieldName string, errMap map[string][]string) {
	if fieldErrors, ok := errMap[fieldName]; ok {
		<ul class="mb-2">
			for _, fieldErr := range fieldErrors {
				<li class="error text-md text-red-600 dark:text-red-500">{ fieldErr }</li>
			}
		</ul>
	}
}

templ newArticleContent(errMap map[string][]string) {
	<form method="post">
	   	@fieldErrors("nofield", errMap)
		<div></div>
		<label>
			<span class="text-gray-700">Title</span>
			<input id="article-title" name="title" type="text" class="mt-1 block w-full" placeholder="" />
			@fieldErrors("title", errMap)
		</label>
		<label>
			<span class="text-gray-700">Content</span>
			<textarea id="article-content" name="content" rows="6" class="mt-1 block w-full" />
			@fieldErrors("content", errMap)
		</label>
		<button id="save" class="btn">
			Save
		</button>
		<a id="back" href="/" class="btn">
			Back
		</a>
	</form>
}

templ newArticle(errMap map[string][]string, userContext UserContext) {
	@base("New article", newArticleContent(errMap), userContext)
}

templ articleDetailView(article *ent.Article, userContext UserContext) {
	<div class="block">
		@articleView(article)
	</div>
	<div class="block m-2 p-2">
		<a id="back" href="/" class="btn">
			Back
		</a>
	</div>
    for _, comment := range article.Edges.Comments {
	   @commentView(comment, comment.Edges.User)
    }
	if userContext.SignedIn {
		@newComment(article.ID, nil, nil, nil)
	}
}

templ articleDetailLayout(article *ent.Article, userContext UserContext) {
	@base("Blog site", articleDetailView(article, userContext), userContext)
}

templ notFound(userContext UserContext) {
	@base("Not found", nil, userContext)
}

templ commentView(comment *ent.Comment, user *ent.User) {
	   <p class="comment m-2 border-2 p-2 rounded-lg">{ fmt.Sprint(user.Name) }: { comment.Text }</p>
}

templ newComment(articleID int, comment *ent.Comment, user *ent.User, errMap map[string][]string) {
	if comment != nil {
		@commentView(comment, user)
	}
	<form id="commentForm" hx-post={ fmt.Sprintf("/article/%v/new-comment", articleID) }
			hx-swap="outerHTML" class="m-2">
	   	@fieldErrors("nofield", errMap)
		<div></div>
		<label>
			<span class="text-gray-700">Text</span>
			<textarea id="comment-text" name="text" rows="6" class="mt-1 block w-full" />
			@fieldErrors("text", errMap)
		</label>
		<button id="comment-save" class="btn m-2">
			Save
		</button>
	</form>
}